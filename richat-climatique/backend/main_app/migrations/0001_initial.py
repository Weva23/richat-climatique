# Generated by Django 4.2 on 2025-08-18 01:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main_app.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('client', 'Client/Entreprise')], default='client', max_length=10, verbose_name='Rôle')),
                ('level', models.CharField(choices=[('N1', 'Niveau 1'), ('N2', 'Niveau 2'), ('N3', 'Niveau 3'), ('N4', 'Niveau 4')], default='N1', max_length=2, verbose_name='Niveau')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('company_name', models.CharField(blank=True, max_length=200, verbose_name="Nom de l'entreprise")),
                ('department', models.CharField(default='Financements Publics', max_length=100, verbose_name='Département')),
                ('date_embauche', models.DateField(blank=True, null=True, verbose_name="Date d'embauche")),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date d'inscription")),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email vérifié')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='Photo de profil')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom du document')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('obligatoire', models.BooleanField(default=True, verbose_name='Obligatoire')),
            ],
            options={
                'verbose_name': 'Type de document',
                'verbose_name_plural': 'Types de documents',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom du projet')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('type_project', models.CharField(choices=[('etat', 'État'), ('prive', 'Privé : ONG / PME / Coopérative'), ('institution', 'Institution publique')], max_length=20, verbose_name='Type')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('progress', 'En cours'), ('ready', 'Prêt'), ('submitted', 'Soumis'), ('approved', 'Approuvé'), ('rejected', 'Rejeté')], default='draft', max_length=20, verbose_name='Statut')),
                ('fund', models.CharField(choices=[('GCF_SAP', 'GCF - Simplified Approval Process'), ('GCF_READINESS', 'GCF - Readiness Programme'), ('GEF_LDCF', 'GEF - Least Developed Countries Fund'), ('CIF', 'CIF - Climate Investment Funds')], max_length=30, verbose_name='Fonds')),
                ('score_viabilite', models.IntegerField(default=0, verbose_name='Score de viabilité')),
                ('montant_demande', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Montant demandé')),
                ('contact_name', models.CharField(max_length=100, verbose_name='Nom du contact')),
                ('contact_email', models.EmailField(max_length=254, verbose_name='Email du contact')),
                ('contact_phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone du contact')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_echeance', models.DateField(blank=True, null=True, verbose_name="Date d'échéance")),
                ('is_from_scraping', models.BooleanField(default=False, verbose_name='Créé par scraping')),
                ('original_source', models.CharField(blank=True, choices=[('GEF', 'Global Environment Facility'), ('GCF', 'Green Climate Fund'), ('OTHER', 'Autre source')], max_length=10, verbose_name='Source originale')),
                ('source_reference', models.CharField(blank=True, max_length=100, verbose_name='Référence source')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('consultant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to=settings.AUTH_USER_MODEL, verbose_name='Consultant')),
            ],
            options={
                'verbose_name': 'Projet',
                'verbose_name_plural': 'Projets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScrapingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(choices=[('GEF', 'Global Environment Facility'), ('GCF', 'Green Climate Fund'), ('OTHER', 'Autre source')], max_length=10, verbose_name='Source')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Démarrée le')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminée le')),
                ('projects_found', models.IntegerField(default=0, verbose_name='Projets trouvés')),
                ('projects_saved', models.IntegerField(default=0, verbose_name='Projets sauvegardés')),
                ('projects_updated', models.IntegerField(default=0, verbose_name='Projets mis à jour')),
                ('success', models.BooleanField(default=False, verbose_name='Succès')),
                ('error_message', models.TextField(blank=True, verbose_name="Message d'erreur")),
                ('max_pages', models.IntegerField(blank=True, null=True, verbose_name='Pages max')),
                ('headless_mode', models.BooleanField(default=False, verbose_name='Mode headless')),
            ],
            options={
                'verbose_name': 'Session de scraping',
                'verbose_name_plural': 'Sessions de scraping',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='ScrapedProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Titre')),
                ('source', models.CharField(choices=[('GEF', 'Global Environment Facility'), ('GCF', 'Green Climate Fund'), ('OTHER', 'Autre source')], max_length=10, verbose_name='Source')),
                ('source_url', models.URLField(blank=True, max_length=1000, verbose_name='URL source')),
                ('source_id', models.CharField(blank=True, max_length=100, verbose_name='ID source')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('organization', models.CharField(blank=True, max_length=200, verbose_name='Organisation')),
                ('project_type', models.CharField(blank=True, max_length=200, verbose_name='Type de projet')),
                ('status', models.CharField(blank=True, max_length=100, verbose_name='Statut')),
                ('total_funding', models.CharField(blank=True, max_length=100, verbose_name='Financement total')),
                ('funding_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='Montant numérique')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Devise')),
                ('country', models.CharField(default='Mauritania', max_length=100, verbose_name='Pays')),
                ('region', models.CharField(blank=True, max_length=100, verbose_name='Région')),
                ('focal_areas', models.TextField(blank=True, verbose_name='Domaines focaux GEF')),
                ('gef_project_id', models.CharField(blank=True, max_length=50, verbose_name='ID Projet GEF')),
                ('gcf_document_type', models.CharField(blank=True, max_length=100, verbose_name='Type document GCF')),
                ('cover_date', models.CharField(blank=True, max_length=50, verbose_name='Date de couverture')),
                ('document_url', models.URLField(blank=True, max_length=1000, verbose_name='URL document')),
                ('additional_links', models.TextField(blank=True, verbose_name='Liens additionnels')),
                ('scraped_at', models.DateTimeField(auto_now_add=True, verbose_name='Scrapé le')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('scraping_source', models.CharField(blank=True, max_length=100, verbose_name='Source du scraping')),
                ('data_completeness_score', models.IntegerField(default=0, verbose_name='Score de complétude')),
                ('is_relevant_for_mauritania', models.BooleanField(default=True, verbose_name='Pertinent pour la Mauritanie')),
                ('needs_review', models.BooleanField(default=False, verbose_name='Nécessite une révision')),
                ('unique_hash', models.CharField(blank=True, max_length=64, unique=True, verbose_name='Hash unique')),
                ('linked_project', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scraped_source', to='main_app.project', verbose_name='Projet lié')),
            ],
            options={
                'verbose_name': 'Projet scrapé',
                'verbose_name_plural': 'Projets scrapés',
                'ordering': ['-scraped_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(verbose_name='Message du client')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvée'), ('rejected', 'Rejetée'), ('in_progress', 'En cours de traitement')], default='pending', max_length=20, verbose_name='Statut')),
                ('client_info', models.JSONField(default=dict, verbose_name='Info client')),
                ('admin_response', models.TextField(blank=True, verbose_name='Réponse admin')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Traité le')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('priority_score', models.IntegerField(default=0, verbose_name='Score de priorité')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_requests', to=settings.AUTH_USER_MODEL, verbose_name='Client')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_requests', to=settings.AUTH_USER_MODEL, verbose_name='Traité par')),
                ('projects', models.ManyToManyField(related_name='requests', to='main_app.scrapedproject', verbose_name='Projets demandés')),
            ],
            options={
                'verbose_name': 'Demande de projet',
                'verbose_name_plural': 'Demandes de projets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Titre')),
                ('source', models.CharField(choices=[('GEF', 'Global Environment Facility'), ('GCF', 'Green Climate Fund'), ('OTHER', 'Autre source')], max_length=10, verbose_name='Source')),
                ('source_url', models.URLField(blank=True, max_length=1000, verbose_name='URL source')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('organization', models.CharField(blank=True, max_length=200, verbose_name='Organisation')),
                ('project_type', models.CharField(blank=True, max_length=200, verbose_name='Type de projet')),
                ('total_funding', models.CharField(blank=True, max_length=100, verbose_name='Financement total')),
                ('funding_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='Montant numérique')),
                ('country', models.CharField(default='Mauritania', max_length=100, verbose_name='Pays')),
                ('data_completeness_score', models.IntegerField(default=0, verbose_name='Score de complétude')),
                ('alert_created_at', models.DateTimeField(auto_now_add=True, verbose_name='Alerte créée le')),
                ('is_new_this_week', models.BooleanField(default=True, verbose_name='Nouveau cette semaine')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Mis en avant')),
                ('priority_level', models.CharField(choices=[('low', 'Basse'), ('medium', 'Moyenne'), ('high', 'Haute'), ('urgent', 'Urgente')], default='medium', max_length=10, verbose_name='Niveau de priorité')),
                ('status', models.CharField(choices=[('active', 'Active'), ('read', 'Lue'), ('archived', 'Archivée'), ('dismissed', 'Ignorée')], default='active', max_length=20, verbose_name='Statut')),
                ('email_sent', models.BooleanField(default=False, verbose_name='Email envoyé')),
                ('email_sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Email envoyé le')),
                ('scraped_project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='alert', to='main_app.scrapedproject', verbose_name='Projet scrapé')),
            ],
            options={
                'verbose_name': 'Alerte de projet',
                'verbose_name_plural': 'Alertes de projets',
                'ordering': ['-alert_created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('document', 'Document'), ('project', 'Projet'), ('deadline', 'Échéance'), ('assignment', 'Assignation'), ('approval', 'Approbation'), ('warning', 'Avertissement'), ('info', 'Information'), ('success', 'Succès'), ('scraping', 'Données scrapées'), ('request', 'Demande client'), ('request_approved', 'Demande approuvée'), ('request_rejected', 'Demande rejetée')], max_length=20, verbose_name='Type')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('read', models.BooleanField(default=False, verbose_name='Lu')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('consultant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Consultant')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_app.project', verbose_name='Projet')),
                ('project_alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='main_app.projectalert', verbose_name='Alerte liée')),
                ('project_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='main_app.projectrequest', verbose_name='Demande liée')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom du document')),
                ('file', models.FileField(upload_to=main_app.models.document_upload_path, verbose_name='Fichier')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('submitted', 'Soumis'), ('reviewed', 'Revu'), ('approved', 'Approuvé'), ('rejected', 'Rejeté'), ('expired', 'Expiré')], default='draft', max_length=20, verbose_name='Statut')),
                ('notes', models.TextField(blank=True, verbose_name='Notes internes')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='Motif de rejet')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'upload")),
                ('date_soumission', models.DateTimeField(blank=True, null=True, verbose_name='Date de soumission')),
                ('date_expiration', models.DateField(blank=True, null=True, verbose_name="Date d'expiration")),
                ('reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de revue')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_app.documenttype', verbose_name='Type de document')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='main_app.project', verbose_name='Projet lié')),
                ('scraped_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='main_app.scrapedproject', verbose_name='Projet scrapé lié')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL, verbose_name='Uploadé par')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'db_table': 'main_app_document',
                'ordering': ['-date_soumission'],
            },
        ),
        migrations.AddIndex(
            model_name='projectalert',
            index=models.Index(fields=['status', 'alert_created_at'], name='main_app_pr_status_0e090c_idx'),
        ),
        migrations.AddIndex(
            model_name='projectalert',
            index=models.Index(fields=['source', 'is_new_this_week'], name='main_app_pr_source_3bd56b_idx'),
        ),
        migrations.AddIndex(
            model_name='projectalert',
            index=models.Index(fields=['priority_level', '-alert_created_at'], name='main_app_pr_priorit_2b486f_idx'),
        ),
        migrations.AddConstraint(
            model_name='document',
            constraint=models.CheckConstraint(check=models.Q(('project__isnull', False), ('scraped_project__isnull', False), _connector='OR'), name='document_has_project_or_scraped_project'),
        ),
    ]
